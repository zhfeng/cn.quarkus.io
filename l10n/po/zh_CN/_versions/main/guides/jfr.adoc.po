msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/main/guides/jfr.adoc
msgid "Using JDK Flight Recorder"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"This guide explains how https://openjdk.org/jeps/328[JDK Flight Recorder] (JFR) can be extended to provide insight into your Quarkus application.\n"
"insight into itself.\n"
"JFR records various information from the Java standard API and JVM as events.\n"
"By adding this extension, you can add custom Quarkus events to JFR. This will help you solve problems in your application."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"JFR can be preconfigured to dump a file, and when the application exits, JFR will output the file.\n"
"The file will contain the contents of the JFR event stream to which Quarkus custom events have also been added.\n"
"You can, of course, get this file at any time you want, even if your application exits unexpectedly."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Architecture"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "In this guide, we create a straightforward REST application to demonstrate JFR."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"This command generates the Maven project and imports the `quarkus-jfr` extension,\n"
"which includes the default JFR support."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `quarkus-jfr` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "pom.xml"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "build.gradle"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Examine the Jakarta REST resource"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Create a `src/main/java/org/acme/jfr/JfrResource.java` file with the following content:"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"Notice that there is no JFR specific code included in the application. By default, requests sent to this\n"
"endpoint will be recorded into JFR without any required code changes."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Running Quarkus applications and JFR"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"Now we are ready to run our application.\n"
"We can launch the application with JFR configured to be enabled from the startup of the Java Virtual Machine."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "With the JDK Flight Recorder and the application running, we can make a request to the provided endpoint:"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "This is all that was needed to write the information to the JFR."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Save the JFR to a file"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"As mentioned above,ã€€the Quarkus application was configured to also start JFR at startup and dump it to a `myrecording.jfr` when it terminates.\n"
"So we can get the file when we hit `CTRL+C` or type `q` to stop the application."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Or, we can also dump with the jcmd command."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "jcmd <PID> JFR.dump name=quarkus filename=myrecording.jfr"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Running jcmd command give us a list of running Java processes and the PID of each process."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Open JFR dump file"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"We can open a JFR dump using two tools: Jfr CLI and JDK Mission Control (JMC).\n"
"It is also possible to read them using JFR APIs, but we won't go into that here."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "jfr CLI"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"The jfr CLI is a tool included in OpenJDK. The executable file is `$JAVA_HOME/bin/jfr`.\n"
"We can use the jfr CLI to see a list of events limited to those related to Quarkus in the dump file by doing the following."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "jfr print --categories quarkus myrecording.jfr"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "JDK Mission Control"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"JMC is essentially a GUI viewer for JFR.\n"
"Some distributions include JMC in OpenJDK binary, but if not, we need to download it manually.\n"
"To see a list of events using the JMC, first we load the JFR file in the JMC as follows."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "jmc -open myrecording.jfr"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"After opening the JFR file, we have two options.\n"
"One is to view the events as a tabular list, and the other is to view the events on the threads in which they occurred, in chronological order."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "To view Quarkus events in tabular style, select the Event Browser on the left side of the JMC, then open the Quarkus event type tree on the right side of the JMC."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "To see Quarkus events in chronological order on a thread, select the `Java application` and `Threads` on the left side of the JMC."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"The standard configuration does not show Quarkus events.\n"
"We have to do three tasks to see the Quarkus events."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Right-click and select `Edit Thread Activity Lanes...`."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Select the plus button to add a new lane on the left side, then check to display that lane."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Select Quarkus as the event type that lane will display and press OK."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Now we can see the Quarkus events per thread."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"Non-blocking is where multiple processes are processed apparently simultaneously in a single thread.\n"
"Therefore, this extension records multiple JFR events concurrently, and a number of events might overlap on the JMC.\n"
"This could make it difficult for you to see the events you want to see.\n"
"To avoid this, we recommend to use xref:#identifying-requests[Request ID] to filter events so that you only see the information about the requests you want to see."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Events"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Identifying Requests"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"This extension works with the OpenTelemetry extension.\n"
"The events recorded by this extension have a trace ID and a span ID. These are recorded with the OpenTelemetry IDs respectively."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "This means that after we identify the trace and span IDs of interest from the UI provided by the OpenTelemetry implementation, we can immediately jump to the details in JFR using those IDs."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"If we have not enabled the OpenTelemetry extension, this extension creates an ID for each request and links it to JFR events as a traceId.\n"
"In this case, the span ID will be null."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "For now, Quarkus only has REST events, but we plan to use this ID to link each event to each other as we add more events in the future."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Event Implementation Policy"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"When JFR starts recording an event, the event does not record to JFR yet, but when it commits that event, the event is recorded.\n"
"Therefore, events that have started recording at dump time but have not yet been committed are not dumped.\n"
"This is unavoidable due to the design of JFR.\n"
"This means that events are not recorded forever if there are prolonged processing.\n"
"Therefore, you will not be aware of prolonged processing."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"To solve this problem, Quarkus can also record start and end events at the beginning and end of processing.\n"
"These events are disabled by default.\n"
"However, we can enable these events on JFR.(described below)"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "REST API Event"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"This event is recorded when either `quarkus-rest` or `resteasy-classic` extension is enabled.\n"
"The following three JFR events are recorded as soon as REST server processing is complete."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "REST"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "REST Start"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "REST End"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "REST Event records the time period from the start of the REST process to the end of the REST server process."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "REST Start Event records the start of the REST server process."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "REST End Event records the end of the REST server process."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "These events have the following information."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "HTTP Method"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "URI"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Resource Class"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Resource Method"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Client"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"HTTP Method records the HTTP Method accessed by the client.\n"
"This will record a string of HTTP methods such as GET, POST, DELETE, and other general HTTP methods."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"URI records the URI path accessed by the client.\n"
"This does not include host names or port numbers."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"Resource Class records the class that was executed.\n"
"We can check whether the Resource Class was executed as expected by the HTTP Method and URI."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"Resource Method records the method that was executed.\n"
"We can check if the Resource Method was executed as expected by the HTTP Method and URI."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Client records information about the accessing client."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Native Image"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"Native image supports JDK Flight Recorder.\n"
"This extension also supports native images.\n"
"To enable JFR on Native image, it is usually built with `--enable-monitoring`.\n"
"However, we can enable JFR in Quarkus Native images by adding `jfr` to the configuration `quarkus.native.monitoring`.\n"
"There are two ways to set up this configuration: by including it in `application.properties` or by specifying it at build time."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "The first method is to first configure settings in `application.properties`."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "application.properties"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Next, simply build as `./mvnw package -Dnative`."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "The second way is to give `-Dquarkus.native.monitoring=jfr` at build time and build as `./mvnw package -Dnative -Dquarkus.native.monitoring=jfr`."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Once we have finished building the Native image, we can run the native application with JFR as follows"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Note that at this time, GraalVM is not possible to record JFR on Windows native images."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "JFR configuration"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"We can use the JFR CLI to configure the events that JFR will record.\n"
"The configuration file, JFC file, is in XML format, so we can modify with a text editor.\n"
"However, we should use `jfr configure`, which is included in OpenJDK by default."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Here we create a configuration file in which RestStart and RestEnd events are recorded, which are not recorded by default."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "jfr configure --input default.jfc +quarkus.RestStart#enabled=true +quarkus.RestEnd#enabled=true --output custom-rest.jfc"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "This creates `custom-rest.jfc` as a configuration file with RestStart and RestEnd enabled."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Now we are ready to run our application with new settings. We launch the application with JFR configured to be enabled from the startup of the Java Virtual Machine."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Developing new events into quarkus-jfr extension."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "This section is for those who would like to add new events with this extension."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"We recommend that new events be associated with existing events.\n"
"Associations are useful when looking at the details of a process that is taking a long time.\n"
"For example, a general REST application retrieves the data needed for processing from a data store.\n"
"If REST events are not associated with datastore events, it is impossible to know which datastore events were processed in each REST request.\n"
"When the two events are associated, we know immediately which datastore event was processed in each REST request."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Data store events are not implemented yet."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"The quarkus-jfr extension provides a Request ID for event association.\n"
"See Identifying Requests for more information on Request IDs."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid ""
"In specific code, the following two steps are required.\n"
"First, implement `traceId` and `spanId` on the new event as follows\n"
"The `@TraceIdRelational` and `@SpanIdRelational` attached to these events will provide the association."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "Then you get the information to store in them from the `IdProducer` object's `getTraceId()` and `getSpanId()`."
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "quarkus-jfr Configuration Reference"
msgstr ""

#: _versions/main/guides/jfr.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
