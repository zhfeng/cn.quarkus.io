msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "Why you should always update to the latest micro versions!"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "How does quarkus use branches and the implication on releases and Quarkus versions"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "We often get questions about how the Quarkus maintainers handle multiple branches and how this impacts releases. This short post attempts to provide the necessary information for answering such questions."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "Development branch"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid ""
"When a maintainer or contributor wants to make a change to Quarkus source code, a Pull Request is opened against the `main` branch.\n"
"This means that all changes once merged are part of the `main` branch and there are no feature branches (a practice that is sometimes referred to as trunk based development)."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "The Maven version used on the `main` branch is always `999-SNAPSHOT`"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "For folks who want to contribute to Quarkus but are uncertain which branch their new change should target, the answer is unequivocally the `main` branch."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "New major or minor version"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid ""
"As a short reminder, Quarkus always provides at least one Candidate Release version of a new minor or major version (in the latter case, there are almost always multiple such releases).\n"
"These releases use the `CR*` suffix, so for example the first candidate release for the `3.11` release was `3.11.CR1`."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid ""
"When time comes to do the new Candidate Release version of a new minor version a new branch using the major and minor is created at the head of the `main` branch.\n"
"For example for the `3.11` release, the branch was made of the following HEAD:"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "After the release process is completed, the branch looks like this:"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "New micro version"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "After creating the release branch, all subsequent changes to `main` will target a future release unless they are backported to the release branch."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid ""
"As we absolutely want a release branch to include the latest bug fixes from `main`, a manual triage needs to occur in order to decide\n"
"which changes in `main` should be backported to the release branch. The maintainers of the Quarkus use the `triage/backport*` labels\n"
"on candidate changes."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "When time comes to release a new micro version (or the final `.0` version), the selected changes are manually backported to the branch"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "New features from `main` are **not** backported to the release branch (with very few exceptions) as we want release branches to be as stable as possible."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "For example, for the `3.11.0` release the branch looked like this:"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "Compare this with the image for `3.11.0.CR1` and you'll see that only safe changes are included."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "Same for `3.11.1`:"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "This backport process happens independently for each supported release branch. It's also the reason why the GitHub project has multiple backport labels."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "Conclusion"
msgstr "解决方案"

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "If Quarkus users should take away one thing from this post it's this:"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid ""
"Regardless of the minor version of Quarkus being used, it is important to always use the latest micro version of a release. The reason for doing so should be evident from\n"
"this blog post, but it is worth reemphasizing: The latest micro release - let's call it `.z` - is almost always going to be more stable than `.0` (or anything before `.z`)\n"
"since it only contains bug fixes and does not contain new features, as those have a higher chance of introducing new bugs."
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "As to which version of Quarkus to use, it comes down to the following question:"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "Does my project value bleeding edge features or stability?"
msgstr ""

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid ""
"If the answer is the former, then the absolute latest Quarkus version on Maven Central should be used.\n"
"If the answer is the latter, then the latest https://quarkus.io/blog/lts-releases/[LTS] version of Quarkus should be used."
msgstr ""
